# 工作流名称
name: Build and Push Docker Image to GHCR

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches:
      - 'main'
  # 允许你手动在 Actions 页面触发此工作流
  workflow_dispatch:

# 环境变量
env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

# 工作流中的任务
jobs:
  build-and-push:
    # 指定运行此任务的虚拟机环境
    runs-on: ubuntu-latest
    # 为此任务授予权限
    permissions:
      contents: read
      packages: write

    # 任务中的步骤
    steps:
      # 第 1 步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第 2 步：登录到 GitHub Container Registry (GHCR)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 第 3 步：设置 Docker Buildx  <-- 这是新增的步骤！
      # 这是使用 gha 缓存所必需的步骤，它会创建一个支持高级功能的构建器实例
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第 4 步：提取 Docker 镜像的元数据（标签和标签）
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      # 第 5 步：构建并推送 Docker 镜像
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 现在的构建器支持 gha 缓存了
          cache-from: type=gha
          cache-to: type=gha,mode=max
